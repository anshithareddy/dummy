# cloudbuild.yaml
steps:
# Install dependencies
- name: 'node:18'
  id: 'install'
  entrypoint: npm
  args: ['install']

# Prepare tests
- name: 'node:18'
  id: 'prepare-tests'
  entrypoint: node
  args:
  - -e
  - |
    const { Storage } = require('@google-cloud/storage');
    const fs = require('fs');
    const { execSync } = require('child_process');
    const path = require('path');
    
    // Function to recursively find all test files
    const findTestFiles = (dir) => {
      let results = [];
      const files = fs.readdirSync(dir);
      
      for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
          results = results.concat(findTestFiles(filePath));
        } else if (file.includes('.task') && file.endsWith('.test.jsx')) {
          results.push(filePath);
        }
      }
      
      return results;
    };
    
    // Get all test files or changed files
    const getTestFiles = () => {
      console.log('Scanning for test files...');
      try {
        const allFiles = findTestFiles('src');
        console.log('Found test files:', allFiles);
        return allFiles;
      } catch (error) {
        console.error('Error scanning for test files:', error);
        return [];
      }
    };
    
    // Extract task ID from filename
    const getTaskId = (fileName) => {
      const match = fileName.match(/\.task-(\d+)\.test\.jsx$/);
      return match ? `task-${match[1]}` : null;
    };
    
    // Group test files by task ID
    const groupTestsByTask = (files) => {
      const taskGroups = {};
      
      files.forEach(file => {
        const taskId = getTaskId(file);
        if (taskId) {
          if (!taskGroups[taskId]) {
            taskGroups[taskId] = [];
          }
          taskGroups[taskId].push(file);
        }
      });
      
      console.log('Task groups:', taskGroups);
      return taskGroups;
    };
    
    function createTestManifest() {
      console.log('Starting test manifest creation...');
      
      const testFiles = getTestFiles();
      console.log('All test files found:', testFiles);
      
      const taskGroups = groupTestsByTask(testFiles);
      console.log('Grouped by tasks:', taskGroups);
      
      const manifest = {
        taskGroups,
        commit_id: process.env.COMMIT_SHA || 'unknown',
        repo_name: process.env.REPO_NAME || 'unknown',
        branch: process.env.BRANCH_NAME || 'unknown',
        timestamp: new Date().toISOString()
      };
      
      fs.writeFileSync('/workspace/test_manifest.json', JSON.stringify(manifest, null, 2));
      console.log('Test manifest created successfully');
    }
    
    createTestManifest();

# Run tests
- name: 'node:18'
  id: 'run-tests'
  entrypoint: node
  args:
  - -e
  - |
    const { Storage } = require('@google-cloud/storage');
    const fs = require('fs');
    const { spawn } = require('child_process');
    
    const storage = new Storage();
    const bucketName = 'startup2-56da7.firebasestorage.app';
    const teamId = '${_TEAM_ID}';
    const projectId = '${_PROJECT_ID}';
    const uid = '${_UID}';
    
    class TaskTestRunner {
      constructor(taskId, testFiles) {
        this.taskId = taskId;
        this.testFiles = testFiles;
        this.results = {
          teamId,
          projectId,
          uid,
          taskId,
          timestamp: new Date().toISOString(),
          commit_id: process.env.COMMIT_SHA || 'unknown',
          branch: process.env.BRANCH_NAME || 'unknown',
          status: 'pending',
          numTotalTestSuites: 0,
          numPassedTestSuites: 0,
          numFailedTestSuites: 0,
          numPendingTestSuites: 0,
          numTotalTests: 0,
          numPassedTests: 0,
          numFailedTests: 0,
          numPendingTests: 0,
          numTodoTests: 0,
          startTime: Date.now(),
          success: true,
          testResults: []
        };
      }
      
      async addTestResult(testFile, result) {
        // If result contains the full Vitest output
        if (result.testResults) {
          // Update summary statistics
          Object.assign(this.results, {
            numTotalTestSuites: (this.results.numTotalTestSuites || 0) + (result.numTotalTestSuites || 0),
            numPassedTestSuites: (this.results.numPassedTestSuites || 0) + (result.numPassedTestSuites || 0),
            numFailedTestSuites: (this.results.numFailedTestSuites || 0) + (result.numFailedTestSuites || 0),
            numPendingTestSuites: (this.results.numPendingTestSuites || 0) + (result.numPendingTestSuites || 0),
            numTotalTests: (this.results.numTotalTests || 0) + (result.numTotalTests || 0),
            numPassedTests: (this.results.numPassedTests || 0) + (result.numPassedTests || 0),
            numFailedTests: (this.results.numFailedTests || 0) + (result.numFailedTests || 0),
            numPendingTests: (this.results.numPendingTests || 0) + (result.numPendingTests || 0),
            numTodoTests: (this.results.numTodoTests || 0) + (result.numTodoTests || 0),
          });
        }
        
        // Add the complete test result
        this.results.testResults.push({
          test_file: testFile,
          ...result,
          timestamp: new Date().toISOString()
        });
        
        // Update overall success status
        this.results.success = this.results.success && (result.success !== false);
      }
      
      async saveToStorage() {
        this.results.status = 'completed';
        this.results.completed_at = new Date().toISOString();
        
        const fileName = `${teamId}_${projectId}_${uid}_${this.taskId}_build.json`;
        const filePath = `test-results/${teamId}/${projectId}/${uid}/${fileName}`;
        
        try {
          console.log(`Saving results to: gs://${bucketName}/${filePath}`);
          const bucket = storage.bucket(bucketName);
          const file = bucket.file(filePath);
          
          await file.save(JSON.stringify(this.results, null, 2), {
            contentType: 'application/json',
            metadata: {
              teamId,
              projectId,
              uid,
              taskId: this.taskId
            }
          });
          
          console.log(`Successfully saved results to: gs://${bucketName}/${filePath}`);
          
        } catch (error) {
          console.error('Error saving to Firebase Storage:', error);
          throw error;
        }
      }
      
      async runTests() {
        for (const testFile of this.testFiles) {
          try {
            console.log(`Running tests for: ${testFile}`);
            const tempOutputFile = `test-output-${Date.now()}.json`;
            
            const result = await new Promise((resolve, reject) => {
              // Use vitest with json reporter and output file
              const vitest = spawn('npx', [
                'vitest', 
                'run', 
                testFile, 
                '--reporter=json', 
                `--outputFile=${tempOutputFile}`,
                '--silent'
              ]);
              
              vitest.stderr.on('data', (data) => {
                console.error(`Test error: ${data}`);
              });
              
              vitest.on('close', (code) => {
                try {
                  if (fs.existsSync(tempOutputFile)) {
                    const results = JSON.parse(fs.readFileSync(tempOutputFile, 'utf8'));
                    fs.unlinkSync(tempOutputFile); // Clean up temp file
                    resolve({
                      status: code === 0 ? 'passed' : 'failed',
                      ...results
                    });
                  } else {
                    resolve({
                      status: 'error',
                      error: 'No test output file generated'
                    });
                  }
                } catch (e) {
                  reject(e);
                }
              });
            });
            
            await this.addTestResult(testFile, result);
            
          } catch (error) {
            console.error(`Error running tests for ${testFile}:`, error);
            await this.addTestResult(testFile, {
              status: 'error',
              error: error.message
            });
          }
        }
        
        await this.saveToStorage();
      }
    }
    
    async function runAllTests() {
      console.log('Starting test execution...');
      
      const manifest = JSON.parse(fs.readFileSync('/workspace/test_manifest.json', 'utf8'));
      console.log('Loaded test manifest:', manifest);
      
      if (Object.keys(manifest.taskGroups).length === 0) {
        console.log('No test files found to run');
        return;
      }
      
      const taskPromises = Object.entries(manifest.taskGroups).map(([taskId, testFiles]) => {
        console.log(`Starting tests for task: ${taskId}`);
        const runner = new TaskTestRunner(taskId, testFiles);
        return runner.runTests();
      });
      
      await Promise.all(taskPromises);
      console.log('All tests completed');
    }
    
    runAllTests();

timeout: '1800s'
substitutions:
  _TEAM_ID: 'auw8idk7'
  _PROJECT_ID: 'firebase-auth'
  _UID: 'o3uDfNNpaueWOBWxP11wLgL5Avg2'
options:
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY